/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Hack, HackInterface } from "../../../contracts/hack.sol/Hack";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_answer",
        type: "bytes",
      },
    ],
    name: "decodeThis",
    outputs: [
      {
        internalType: "string",
        name: "_decodedValue",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610274806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e3a79a7b14610030575b600080fd5b61004361003e3660046100e4565b610059565b6040516100509190610194565b60405180910390f35b60608180602001905181019061006f91906101c7565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156100b4576100b4610075565b604052919050565b600067ffffffffffffffff8211156100d6576100d6610075565b50601f01601f191660200190565b6000602082840312156100f657600080fd5b813567ffffffffffffffff81111561010d57600080fd5b8201601f8101841361011e57600080fd5b803561013161012c826100bc565b61008b565b81815285602083850101111561014657600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561017f578181015183820152602001610167565b8381111561018e576000848401525b50505050565b60208152600082518060208401526101b3816040850160208701610164565b601f01601f19169190910160400192915050565b6000602082840312156101d957600080fd5b815167ffffffffffffffff8111156101f057600080fd5b8201601f8101841361020157600080fd5b805161020f61012c826100bc565b81815285602083850101111561022457600080fd5b610235826020830160208601610164565b9594505050505056fea26469706673582212203bc8d691cc330f5652cea51a73ed9417cf5c26a7a78966e01cfbc2a25d0278fa64736f6c63430008090033";

type HackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Hack__factory extends ContractFactory {
  constructor(...args: HackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Hack> {
    return super.deploy(overrides || {}) as Promise<Hack>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Hack {
    return super.attach(address) as Hack;
  }
  override connect(signer: Signer): Hack__factory {
    return super.connect(signer) as Hack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HackInterface {
    return new utils.Interface(_abi) as HackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Hack {
    return new Contract(address, _abi, signerOrProvider) as Hack;
  }
}
